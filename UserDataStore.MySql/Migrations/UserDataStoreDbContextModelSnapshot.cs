// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserDataStore.MySql.Database;

namespace UserDataStore.MySql.Migrations
{
    [DbContext(typeof(UserDataStoreDbContext))]
    partial class UserDataStoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("UserDataStore.MySql.Database.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("FirstSeen")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("LastSeen")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id", "Type");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserDataStore.MySql.Database.Entities.UserGenericData", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("UserType")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SerializedValue")
                        .HasColumnType("json");

                    b.HasKey("Key", "UserId", "UserType");

                    b.HasIndex("UserId", "UserType");

                    b.ToTable("UserGenericDatas");
                });

            modelBuilder.Entity("UserDataStore.MySql.Database.Entities.UserGrantedPermission", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("UserType")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Permission")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "UserType", "Permission");

                    b.ToTable("UserGrantedPermissions");
                });

            modelBuilder.Entity("UserDataStore.MySql.Database.Entities.UserGrantedRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("UserType")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "UserType", "RoleId");

                    b.ToTable("UserGrantedRoles");
                });

            modelBuilder.Entity("UserDataStore.MySql.Database.Entities.User", b =>
                {
                    b.OwnsOne("UserDataStore.MySql.Database.Entities.UserBan", "BanInfo", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                            b1.Property<string>("UserType")
                                .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                            b1.Property<DateTime?>("ExpireDate")
                                .HasColumnType("datetime(6)");

                            b1.Property<string>("InstigatorId")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("InstigatorType")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("Reason")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.HasKey("UserId", "UserType");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId", "UserType");
                        });
                });

            modelBuilder.Entity("UserDataStore.MySql.Database.Entities.UserGenericData", b =>
                {
                    b.HasOne("UserDataStore.MySql.Database.Entities.User", null)
                        .WithMany("GenericDatas")
                        .HasForeignKey("UserId", "UserType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserDataStore.MySql.Database.Entities.UserGrantedPermission", b =>
                {
                    b.HasOne("UserDataStore.MySql.Database.Entities.User", null)
                        .WithMany("GrantedPermissions")
                        .HasForeignKey("UserId", "UserType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserDataStore.MySql.Database.Entities.UserGrantedRole", b =>
                {
                    b.HasOne("UserDataStore.MySql.Database.Entities.User", null)
                        .WithMany("GrantedRoles")
                        .HasForeignKey("UserId", "UserType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
